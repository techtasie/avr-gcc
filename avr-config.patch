diff --git a/gcc-12.1.0/gcc/config/avr/avr-dimode.md b/gcc-12.1.0/gcc/config/avr/avr-dimode.md
index 6e491336915..1817c16fb10 100644
--- a/gcc-12.1.0/gcc/config/avr/avr-dimode.md
+++ b/gcc-12.1.0/gcc/config/avr/avr-dimode.md
@@ -1,6 +1,6 @@
 ;;   Machine description for GNU compiler,
 ;;   for Atmel AVR micro controllers.
-;;   Copyright (C) 1998-2022 Free Software Foundation, Inc.
+;;   Copyright (C) 1998-2021 Free Software Foundation, Inc.
 ;;   Contributed by Georg Lay (avr@gjlay.de)
 ;;
 ;; This file is part of GCC.
@@ -95,77 +95,39 @@
 ;; "adddq3_insn" "addudq3_insn"
 ;; "addda3_insn" "adduda3_insn"
 ;; "addta3_insn" "adduta3_insn"
-(define_insn_and_split "add<mode>3_insn"
+(define_insn "add<mode>3_insn"
   [(set (reg:ALL8 ACC_A)
         (plus:ALL8 (reg:ALL8 ACC_A)
                    (reg:ALL8 ACC_B)))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8 ACC_A)
-                   (plus:ALL8 (reg:ALL8 ACC_A)
-                              (reg:ALL8 ACC_B)))
-   (clobber (reg:CC REG_CC))])])
-
-(define_insn "*add<mode>3_insn"
-  [(set (reg:ALL8 ACC_A)
-        (plus:ALL8 (reg:ALL8 ACC_A)
-                   (reg:ALL8 ACC_B)))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   "%~call __adddi3"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "clobber")])
 
-(define_insn_and_split "adddi3_const8_insn"
+(define_insn "adddi3_const8_insn"
   [(set (reg:DI ACC_A)
         (plus:DI (reg:DI ACC_A)
                  (sign_extend:DI (reg:QI REG_X))))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:DI ACC_A)
-                   (plus:DI (reg:DI ACC_A)
-                            (sign_extend:DI (reg:QI REG_X))))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*adddi3_const8_insn"
-  [(set (reg:DI ACC_A)
-        (plus:DI (reg:DI ACC_A)
-                 (sign_extend:DI (reg:QI REG_X))))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   "%~call __adddi3_s8"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "clobber")])
 
 ;; "adddi3_const_insn"
 ;; "adddq3_const_insn" "addudq3_const_insn"
 ;; "addda3_const_insn" "adduda3_const_insn"
 ;; "addta3_const_insn" "adduta3_const_insn"
-(define_insn_and_split "add<mode>3_const_insn"
+(define_insn "add<mode>3_const_insn"
   [(set (reg:ALL8 ACC_A)
         (plus:ALL8 (reg:ALL8 ACC_A)
                    (match_operand:ALL8 0 "const_operand" "n Ynn")))]
   "avr_have_dimode
    && !s8_operand (operands[0], VOIDmode)"
-   "#"
-   "&& reload_completed"
-   [(parallel [(set (reg:ALL8 ACC_A)
-                    (plus:ALL8 (reg:ALL8 ACC_A)
-                               (match_dup 0)))
-               (clobber (reg:CC REG_CC))])])
-
-(define_insn "*add<mode>3_const_insn"
-  [(set (reg:ALL8 ACC_A)
-        (plus:ALL8 (reg:ALL8 ACC_A)
-                   (match_operand:ALL8 0 "const_operand" "n Ynn")))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode
-   && !s8_operand (operands[0], VOIDmode)
-   && reload_completed"
   {
     return avr_out_plus (insn, operands);
   }
-  [(set_attr "adjust_len" "plus")])
+  [(set_attr "adjust_len" "plus")
+   (set_attr "cc" "clobber")])
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@@ -205,53 +167,29 @@
 ;; "subdq3_insn" "subudq3_insn"
 ;; "subda3_insn" "subuda3_insn"
 ;; "subta3_insn" "subuta3_insn"
-(define_insn_and_split "sub<mode>3_insn"
+(define_insn "sub<mode>3_insn"
   [(set (reg:ALL8 ACC_A)
         (minus:ALL8 (reg:ALL8 ACC_A)
                     (reg:ALL8 ACC_B)))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8 ACC_A)
-                   (minus:ALL8 (reg:ALL8 ACC_A)
-                               (reg:ALL8 ACC_B)))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*sub<mode>3_insn"
-  [(set (reg:ALL8 ACC_A)
-        (minus:ALL8 (reg:ALL8 ACC_A)
-                    (reg:ALL8 ACC_B)))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   "%~call __subdi3"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "set_czn")])
 
 ;; "subdi3_const_insn"
 ;; "subdq3_const_insn" "subudq3_const_insn"
 ;; "subda3_const_insn" "subuda3_const_insn"
 ;; "subta3_const_insn" "subuta3_const_insn"
-(define_insn_and_split "sub<mode>3_const_insn"
+(define_insn "sub<mode>3_const_insn"
   [(set (reg:ALL8 ACC_A)
         (minus:ALL8 (reg:ALL8 ACC_A)
                     (match_operand:ALL8 0 "const_operand" "n Ynn")))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8 ACC_A)
-                   (minus:ALL8 (reg:ALL8 ACC_A)
-                               (match_dup 0)))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*sub<mode>3_const_insn"
-  [(set (reg:ALL8 ACC_A)
-        (minus:ALL8 (reg:ALL8 ACC_A)
-                    (match_operand:ALL8 0 "const_operand" "n Ynn")))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   {
     return avr_out_plus (insn, operands);
   }
-  [(set_attr "adjust_len" "plus")])
+  [(set_attr "adjust_len" "plus")
+   (set_attr "cc" "clobber")])
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Signed Saturating Addition and Subtraction
@@ -282,49 +220,25 @@
     DONE;
   })
 
-(define_insn_and_split "<code_stdname><mode>3_insn"
+(define_insn "<code_stdname><mode>3_insn"
   [(set (reg:ALL8S ACC_A)
         (ss_addsub:ALL8S (reg:ALL8S ACC_A)
                          (reg:ALL8S ACC_B)))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8S ACC_A)
-                   (ss_addsub:ALL8S (reg:ALL8S ACC_A)
-                                    (reg:ALL8S ACC_B)))
-             (clobber (reg:CC REG_CC))])])
-
-(define_insn "*<code_stdname><mode>3_insn"
-  [(set (reg:ALL8S ACC_A)
-        (ss_addsub:ALL8S (reg:ALL8S ACC_A)
-                         (reg:ALL8S ACC_B)))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   "%~call __<code_stdname><mode>3"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "clobber")])
 
-(define_insn_and_split "<code_stdname><mode>3_const_insn"
+(define_insn "<code_stdname><mode>3_const_insn"
   [(set (reg:ALL8S ACC_A)
         (ss_addsub:ALL8S (reg:ALL8S ACC_A)
                          (match_operand:ALL8S 0 "const_operand" "n Ynn")))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8S ACC_A)
-                   (ss_addsub:ALL8S (reg:ALL8S ACC_A)
-                                    (match_dup 0)))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*<code_stdname><mode>3_const_insn"
-  [(set (reg:ALL8S ACC_A)
-        (ss_addsub:ALL8S (reg:ALL8S ACC_A)
-                         (match_operand:ALL8S 0 "const_operand" "n Ynn")))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   {
     return avr_out_plus (insn, operands);
   }
-  [(set_attr "adjust_len" "plus")])
+  [(set_attr "adjust_len" "plus")
+   (set_attr "cc" "clobber")])
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Unsigned Saturating Addition and Subtraction
@@ -355,49 +269,25 @@
     DONE;
   })
 
-(define_insn_and_split "<code_stdname><mode>3_insn"
+(define_insn "<code_stdname><mode>3_insn"
   [(set (reg:ALL8U ACC_A)
         (us_addsub:ALL8U (reg:ALL8U ACC_A)
                          (reg:ALL8U ACC_B)))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8U ACC_A)
-                   (us_addsub:ALL8U (reg:ALL8U ACC_A)
-                                    (reg:ALL8U ACC_B)))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*<code_stdname><mode>3_insn"
-  [(set (reg:ALL8U ACC_A)
-        (us_addsub:ALL8U (reg:ALL8U ACC_A)
-                         (reg:ALL8U ACC_B)))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   "%~call __<code_stdname><mode>3"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "clobber")])
 
-(define_insn_and_split "<code_stdname><mode>3_const_insn"
+(define_insn "<code_stdname><mode>3_const_insn"
   [(set (reg:ALL8U ACC_A)
         (us_addsub:ALL8U (reg:ALL8U ACC_A)
                          (match_operand:ALL8U 0 "const_operand" "n Ynn")))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8U ACC_A)
-                   (us_addsub:ALL8U (reg:ALL8U ACC_A)
-                                    (match_operand:ALL8U 0 "const_operand" "n Ynn")))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*<code_stdname><mode>3_const_insn"
-  [(set (reg:ALL8U ACC_A)
-        (us_addsub:ALL8U (reg:ALL8U ACC_A)
-                         (match_operand:ALL8U 0 "const_operand" "n Ynn")))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   {
     return avr_out_plus (insn, operands);
   }
-  [(set_attr "adjust_len" "plus")])
+  [(set_attr "adjust_len" "plus")
+   (set_attr "cc" "clobber")])
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Negation
@@ -416,23 +306,13 @@
     DONE;
   })
 
-(define_insn_and_split "negdi2_insn"
+(define_insn "negdi2_insn"
   [(set (reg:DI ACC_A)
         (neg:DI (reg:DI ACC_A)))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:DI ACC_A)
-                   (neg:DI (reg:DI ACC_A)))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*negdi2_insn"
-  [(set (reg:DI ACC_A)
-        (neg:DI (reg:DI ACC_A)))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   "%~call __negdi2"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "clobber")])
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@@ -442,7 +322,7 @@
 (define_expand "conditional_jump"
   [(set (pc)
         (if_then_else
-         (match_operator 0 "ordered_comparison_operator" [(reg:CC REG_CC)
+         (match_operator 0 "ordered_comparison_operator" [(cc0)
                                                           (const_int 0)])
          (label_ref (match_operand 1 "" ""))
          (pc)))]
@@ -453,14 +333,13 @@
 ;; "cbranchda4" "cbranchuda4"
 ;; "cbranchta4" "cbranchuta4"
 (define_expand "cbranch<mode>4"
-  [(set (pc)
-        (if_then_else (match_operator 0 "ordered_comparison_operator"
-                        [(match_operand:ALL8 1 "register_operand"  "")
-                         (match_operand:ALL8 2 "nonmemory_operand" "")])
-         (label_ref (match_operand 3 "" ""))
-         (pc)))]
+  [(parallel [(match_operand:ALL8 1 "register_operand" "")
+              (match_operand:ALL8 2 "nonmemory_operand" "")
+              (match_operator 0 "ordered_comparison_operator" [(cc0)
+                                                               (const_int 0)])
+              (label_ref (match_operand 3 "" ""))])]
   "avr_have_dimode"
-   {
+  {
     rtx acc_a = gen_rtx_REG (<MODE>mode, ACC_A);
 
     avr_fix_inputs (operands, 1 << 2, regmask (<MODE>mode, ACC_A));
@@ -469,36 +348,19 @@
     if (s8_operand (operands[2], VOIDmode))
       {
         emit_move_insn (gen_rtx_REG (QImode, REG_X), operands[2]);
-        emit_jump_insn (gen_cbranch_const8_di2_split (operands[0], operands[3]));
+        emit_insn (gen_compare_const8_di2 ());
       }
     else if (const_operand (operands[2], GET_MODE (operands[2])))
       {
-        emit_jump_insn (gen_cbranch_const_<mode>2_split (operands[0],
-                                                         operands[2],
-                                                         operands[3]));
+        emit_insn (gen_compare_const_<mode>2 (operands[2]));
       }
     else
       {
         emit_move_insn (gen_rtx_REG (<MODE>mode, ACC_B), operands[2]);
-        emit_jump_insn (gen_cbranch_<mode>2_split (operands[0], operands[3]));
+        emit_insn (gen_compare_<mode>2 ());
       }
-    DONE;
-   })
 
-(define_insn_and_split "cbranch_<mode>2_split"
-  [(set (pc)
-        (if_then_else (match_operator 0 "ordered_comparison_operator"
-                        [(reg:ALL8 ACC_A)
-                         (reg:ALL8 ACC_B)])
-         (label_ref (match_operand 1 "" ""))
-         (pc)))]
-  "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(const_int 0)]
-  {
-    emit_insn (gen_compare_<mode>2 ());
-    emit_jump_insn (gen_conditional_jump (operands[0], operands[1]));
+    emit_jump_insn (gen_conditional_jump (operands[0], operands[3]));
     DONE;
   })
 
@@ -507,74 +369,39 @@
 ;; "compare_da2" "compare_uda2"
 ;; "compare_ta2" "compare_uta2"
 (define_insn "compare_<mode>2"
-  [(set (reg:CC REG_CC)
-        (compare:CC (reg:ALL8 ACC_A)
-                    (reg:ALL8 ACC_B)))]
-  "reload_completed && avr_have_dimode"
-  "%~call __cmpdi2"
-  [(set_attr "adjust_len" "call")])
-
-(define_insn_and_split "cbranch_const8_di2_split"
-  [(set (pc)
-        (if_then_else (match_operator 0 "ordered_comparison_operator"
-                        [(reg:DI ACC_A)
-                         (sign_extend:DI (reg:QI REG_X))])
-         (label_ref (match_operand 1 "" ""))
-         (pc)))]
+  [(set (cc0)
+        (compare (reg:ALL8 ACC_A)
+                 (reg:ALL8 ACC_B)))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(const_int 0)]
-  {
-    emit_insn (gen_compare_const8_di2 ());
-    emit_jump_insn (gen_conditional_jump (operands[0], operands[1]));
-    DONE;
-  })
+  "%~call __cmpdi2"
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "compare")])
 
 (define_insn "compare_const8_di2"
-  [(set (reg:CC REG_CC)
-        (compare:CC (reg:DI ACC_A)
-                    (sign_extend:DI (reg:QI REG_X))))]
-  "reload_completed && avr_have_dimode"
+  [(set (cc0)
+        (compare (reg:DI ACC_A)
+                 (sign_extend:DI (reg:QI REG_X))))]
+  "avr_have_dimode"
   "%~call __cmpdi2_s8"
-  [(set_attr "adjust_len" "call")])
-
-(define_insn_and_split "cbranch_const_<mode>2_split"
-  [(set (pc)
-        (if_then_else (match_operator 0 "ordered_comparison_operator"
-                        [(reg:ALL8 ACC_A)
-                         (match_operand:ALL8 1 "const_operand" "n Ynn")])
-         (label_ref (match_operand 2 "" ""))
-         (pc)))
-   (clobber (match_scratch:QI 3 "=&d"))]
-  "avr_have_dimode
-   && !s8_operand (operands[1], VOIDmode)"
-  "#"
-  "&& reload_completed"
-  [(const_int 0)]
-  {
-    emit_insn (gen_compare_const_<mode>2 (operands[1], operands[3]));
-    emit_jump_insn (gen_conditional_jump (operands[0], operands[2]));
-    DONE;
-  })
-
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "compare")])
 
 ;; "compare_const_di2"
 ;; "compare_const_dq2" "compare_const_udq2"
 ;; "compare_const_da2" "compare_const_uda2"
 ;; "compare_const_ta2" "compare_const_uta2"
 (define_insn "compare_const_<mode>2"
-  [(set (reg:CC REG_CC)
-        (compare:CC (reg:ALL8 ACC_A)
-                    (match_operand:ALL8 0 "const_operand" "n Ynn")))
-   (clobber (match_operand:QI 1 "register_operand" "=&d"))]
-  "reload_completed
-   && avr_have_dimode
+  [(set (cc0)
+        (compare (reg:ALL8 ACC_A)
+                 (match_operand:ALL8 0 "const_operand" "n Ynn")))
+   (clobber (match_scratch:QI 1 "=&d"))]
+  "avr_have_dimode
    && !s8_operand (operands[0], VOIDmode)"
   {
     return avr_out_compare64 (insn, operands, NULL);
   }
-  [(set_attr "adjust_len" "compare64")])
+  [(set_attr "adjust_len" "compare64")
+   (set_attr "cc" "compare")])
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@@ -617,26 +444,14 @@
 ;; "ashludq3_insn"  "ashrudq3_insn"  "lshrudq3_insn"  "rotludq3_insn"
 ;; "ashluda3_insn"  "ashruda3_insn"  "lshruda3_insn"  "rotluda3_insn"
 ;; "ashluta3_insn"  "ashruta3_insn"  "lshruta3_insn"  "rotluta3_insn"
-(define_insn_and_split "<code_stdname><mode>3_insn"
+(define_insn "<code_stdname><mode>3_insn"
   [(set (reg:ALL8 ACC_A)
         (di_shifts:ALL8 (reg:ALL8 ACC_A)
                         (reg:QI 16)))]
   "avr_have_dimode"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (reg:ALL8 ACC_A)
-                   (di_shifts:ALL8 (reg:ALL8 ACC_A)
-                                   (reg:QI 16)))
-              (clobber (reg:CC REG_CC))])])
-
-(define_insn "*<code_stdname><mode>3_insn"
-  [(set (reg:ALL8 ACC_A)
-        (di_shifts:ALL8 (reg:ALL8 ACC_A)
-                        (reg:QI 16)))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode && reload_completed"
   "%~call __<code_stdname>di3"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "clobber")])
 
 ;; "umulsidi3"
 ;; "mulsidi3"
@@ -660,8 +475,7 @@
 
 ;; "umulsidi3_insn"
 ;; "mulsidi3_insn"
-
-(define_insn_and_split "<extend_u>mulsidi3_insn"
+(define_insn "<extend_u>mulsidi3_insn"
   [(set (reg:DI ACC_A)
         (mult:DI (any_extend:DI (reg:SI 18))
                  (any_extend:DI (reg:SI 22))))
@@ -669,24 +483,6 @@
    (clobber (reg:HI REG_Z))]
   "avr_have_dimode
    && AVR_HAVE_MUL"
-   "#"
-   "&& reload_completed"
-   [(parallel [(set (reg:DI ACC_A)
-                    (mult:DI (any_extend:DI (reg:SI 18))
-                             (any_extend:DI (reg:SI 22))))
-               (clobber (reg:HI REG_X))
-               (clobber (reg:HI REG_Z))
-               (clobber (reg:CC REG_CC))])])
-
-(define_insn "*<extend_u>mulsidi3_insn"
-  [(set (reg:DI ACC_A)
-        (mult:DI (any_extend:DI (reg:SI 18))
-                 (any_extend:DI (reg:SI 22))))
-   (clobber (reg:HI REG_X))
-   (clobber (reg:HI REG_Z))
-   (clobber (reg:CC REG_CC))]
-  "avr_have_dimode
-   && AVR_HAVE_MUL
-   && reload_completed"
   "%~call __<extend_u>mulsidi3"
-  [(set_attr "adjust_len" "call")])
+  [(set_attr "adjust_len" "call")
+   (set_attr "cc" "clobber")])
